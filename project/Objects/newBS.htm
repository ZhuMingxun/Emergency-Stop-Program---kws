<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\newBS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\newBS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jun 20 09:36:14 2018
<BR><P>
<H3>Maximum Stack Usage =       1144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ReadUID &rArr; CRC32
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[54]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[19]">Reserved_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">Reserved_IRQHandler</a><BR>
 <LI><a href="#[1c]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">BOD_IRQHandler</a><BR>
 <LI><a href="#[3d]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC_IRQHandler</a> from adc.o(i.ADC_IRQHandler) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[1c]">BOD_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[10]">CAN_IRQHandler</a> from can.o(i.CAN_IRQHandler) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[27]">CAN_error</a> from can.o(i.CAN_error) referenced from can.o(.constdata)
 <LI><a href="#[25]">CAN_rx</a> from can.o(i.CAN_rx) referenced from can.o(.constdata)
 <LI><a href="#[26]">CAN_tx</a> from can.o(i.CAN_tx) referenced from can.o(.constdata)
 <LI><a href="#[28]">Chip_I2C_EventHandler</a> from i2c_11xx.o(i.Chip_I2C_EventHandler) referenced from i2c_11xx.o(.data)
 <LI><a href="#[c]">DebugMon_Handler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[12]">I2C_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[20]">PIOINT0_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[1f]">PIOINT1_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[1e]">PIOINT2_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[1d]">PIOINT3_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[19]">Reserved_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced 3 times from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[17]">SSP0_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[11]">SSP1_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from sysinit.o(i.SystemInit) referenced from keil_startup_lpc11xx.o(.text)
 <LI><a href="#[13]">TIMER16_0_IRQHandler</a> from t16b0.o(i.TIMER16_0_IRQHandler) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[14]">TIMER16_1_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[15]">TIMER32_0_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[16]">TIMER32_1_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[18]">UART_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[f]">WAKEUP_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced 13 times from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[1b]">WDT_IRQHandler</a> from keil_startup_lpc11xx.o(.text) referenced from keil_startup_lpc11xx.o(RESET)
 <LI><a href="#[29]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc11xx.o(.text)
 <LI><a href="#[24]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[23]">fputc</a> from board.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[be]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bf]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[41]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[31]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[36]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[dd]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[33]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[35]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[de]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[37]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ReadUID &rArr; CRC32
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[df]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[56]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rcv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Reserved_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PIOINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3e]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[40]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[30]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[32]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[e2]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Check
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetClockRate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_0_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[47]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[46]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[ea]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[eb]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[ec]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3f]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[44]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4f]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[4d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[50]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[51]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[34]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[39]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[52]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[ed]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ee]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>ADCInit</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, adc.o(i.ADCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCInit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, adc.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>AMBEGetRdStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ambe.o(i.AMBEGetRdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AMBEGetRdStatus &rArr; Chip_GPIO_GetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>AMBEGetWrStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ambe.o(i.AMBEGetWrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AMBEGetWrStatus &rArr; Chip_GPIO_GetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEWrData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetSine
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetGain
</UL>

<P><STRONG><a name="[5c]"></a>AMBEInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ambe.o(i.AMBEInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AMBEInit &rArr; AMBESetGain &rArr; ParallelSet &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetGain
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEReset
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>AMBERdData</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ambe.o(i.AMBERdData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AMBERdData &rArr; ParalleGet &rArr; Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParalleGet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>AMBEReset</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ambe.o(i.AMBEReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AMBEReset &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetGain
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>AMBESetGain</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ambe.o(i.AMBESetGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AMBESetGain &rArr; ParallelSet &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParallelSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEGetWrStatus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEReset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>AMBESetSine</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ambe.o(i.AMBESetSine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AMBESetSine &rArr; ParallelSet &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParallelSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEGetWrStatus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Open
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>AMBEWrData</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ambe.o(i.AMBEWrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AMBEWrData &rArr; ParallelSet &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParallelSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEGetWrStatus
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>AT24C16_Check</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, at24c16.o(i.AT24C16_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AT24C16_Check &rArr; AT24C16_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_WriteOneByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_ReadOneByte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>AT24C16_ReadOneByte</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, at24c16.o(i.AT24C16_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AT24C16_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Recieve_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Check
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>AT24C16_WriteOneByte</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, at24c16.o(i.AT24C16_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AT24C16_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_24c16
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Check
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>Board_Debug_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(i.Board_Debug_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[72]"></a>Board_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Board_Init &rArr; Board_Debug_Init &rArr; Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>Board_SystemInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, board_sysinit.o(i.Board_SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Board_SystemInit &rArr; SystemSetupClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetupClocking
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[76]"></a>Board_UARTPutChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(i.Board_UARTPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Board_UARTPutChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[78]"></a>CANSend_AMBESetSine</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, can.o(i.CANSend_AMBESetSine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CANSend_AMBESetSine &rArr; can_send &rArr; CAN_init &rArr; baudrateCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Open
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Close
</UL>

<P><STRONG><a name="[10]"></a>CAN_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can.o(i.CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_error</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, can.o(i.CAN_error))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>CAN_init</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, can.o(i.CAN_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN_init &rArr; baudrateCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baudrateCalculate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[8d]"></a>CAN_reset</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, can.o(i.CAN_reset))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[25]"></a>CAN_rx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, can.o(i.CAN_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_rx &rArr; can_rcv &rArr; Set_Volume &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rcv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>CAN_tx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can.o(i.CAN_tx))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>CRC32</STRONG> (Thumb, 70 bytes, Stack size 1048 bytes, bspiapdriver.o(i.CRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = CRC32
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUID
</UL>

<P><STRONG><a name="[7f]"></a>Chip_Clock_GetMainClockRate</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clock_11xx.o(i.Chip_Clock_GetMainClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetClockRate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SetBaud
</UL>

<P><STRONG><a name="[83]"></a>Chip_Clock_GetSystemClockRate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clock_11xx.o(i.Chip_Clock_GetSystemClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[81]"></a>Chip_Clock_GetSystemPLLInClockRate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clock_11xx.o(i.Chip_Clock_GetSystemPLLInClockRate))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLOutClockRate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[80]"></a>Chip_Clock_GetSystemPLLOutClockRate</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clock_11xx.o(i.Chip_Clock_GetSystemPLLOutClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Chip_Clock_GetSystemPLLOutClockRate
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemPLLInClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[82]"></a>Chip_Clock_GetWDTOSCRate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, clock_11xx.o(i.Chip_Clock_GetWDTOSCRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
</UL>

<P><STRONG><a name="[b2]"></a>Chip_Clock_SetMainClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_11xx.o(i.Chip_Clock_SetMainClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetupClocking
</UL>

<P><STRONG><a name="[b0]"></a>Chip_Clock_SetSystemPLLSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_11xx.o(i.Chip_Clock_SetSystemPLLSource))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetupClocking
</UL>

<P><STRONG><a name="[73]"></a>Chip_GPIO_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_11xx_2.o(i.Chip_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>Chip_I2C_EventHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c_11xx.o(i.Chip_I2C_EventHandler))
<BR>[Address Reference Count : 1]<UL><LI> i2c_11xx.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>Chip_I2C_Init</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, i2c_11xx.o(i.Chip_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_app_init
</UL>

<P><STRONG><a name="[84]"></a>Chip_I2C_SetClockRate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, i2c_11xx.o(i.Chip_I2C_SetClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_I2C_SetClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_app_init
</UL>

<P><STRONG><a name="[b1]"></a>Chip_SYSCTL_PowerDown</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctl_11xx.o(i.Chip_SYSCTL_PowerDown))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetupClocking
</UL>

<P><STRONG><a name="[af]"></a>Chip_SYSCTL_PowerUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctl_11xx.o(i.Chip_SYSCTL_PowerUp))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetupClocking
</UL>

<P><STRONG><a name="[70]"></a>Chip_UART_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart_11xx.o(i.Chip_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[85]"></a>Chip_UART_Send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_11xx.o(i.Chip_UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_SendBlocking
</UL>

<P><STRONG><a name="[77]"></a>Chip_UART_SendBlocking</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, uart_11xx.o(i.Chip_UART_SendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>

<P><STRONG><a name="[71]"></a>Chip_UART_SetBaud</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart_11xx.o(i.Chip_UART_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chip_UART_SetBaud &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetMainClockRate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Debug_Init
</UL>

<P><STRONG><a name="[86]"></a>D18V_State</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dataio.o(i.D18V_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = D18V_State &rArr; Chip_GPIO_GetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>Delay</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ambe.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEWrData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetSine
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetGain
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBERdData
</UL>

<P><STRONG><a name="[88]"></a>Device_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Device_Init &rArr; CAN_init &rArr; baudrateCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_app_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>Get_Key1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, speak.o(i.Get_Key1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Key1 &rArr; Chip_GPIO_GetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>Get_Key2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, speak.o(i.Get_Key2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Key2 &rArr; Chip_GPIO_GetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>Gpio_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dataio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_Init &rArr; JDQ_State_Open &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JDQ_State_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C_Recieve_Byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at24c16.o(i.I2C_Recieve_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_ReadOneByte
</UL>

<P><STRONG><a name="[6b]"></a>I2C_Send_Byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at24c16.o(i.I2C_Send_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_WriteOneByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_ReadOneByte
</UL>

<P><STRONG><a name="[6a]"></a>I2C_Send_Start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, at24c16.o(i.I2C_Send_Start))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_WriteOneByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_ReadOneByte
</UL>

<P><STRONG><a name="[6d]"></a>I2C_Stop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, at24c16.o(i.I2C_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_WriteOneByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_ReadOneByte
</UL>

<P><STRONG><a name="[96]"></a>Init_I2C_PinMux</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, at24c16.o(i.Init_I2C_PinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_I2C_PinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_app_init
</UL>

<P><STRONG><a name="[98]"></a>JDQ_State_Close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dataio.o(i.JDQ_State_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JDQ_State_Close &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rcv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>JDQ_State_Open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dataio.o(i.JDQ_State_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JDQ_State_Open &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>Led_OFF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, speak.o(i.Led_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led_OFF &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Close
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9c]"></a>Led_ON</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, speak.o(i.Led_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Led_ON &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Open
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>Mute_OFF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, speak.o(i.Mute_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mute_OFF &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Open
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>Mute_ON</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, speak.o(i.Mute_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mute_ON &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Close
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9f]"></a>POWEROFF_State_Close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dataio.o(i.POWEROFF_State_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWEROFF_State_Close &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rcv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>POWEROFF_State_Open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dataio.o(i.POWEROFF_State_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWEROFF_State_Open &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rcv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>ParalleGet</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, ambe.o(i.ParalleGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ParalleGet &rArr; Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBERdData
</UL>

<P><STRONG><a name="[64]"></a>ParallelSet</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, ambe.o(i.ParallelSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ParallelSet &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEWrData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetSine
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetGain
</UL>

<P><STRONG><a name="[5d]"></a>PinInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, ambe.o(i.PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PinInit &rArr; Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEInit
</UL>

<P><STRONG><a name="[a4]"></a>ReadUID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bspiapdriver.o(i.ReadUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = ReadUID &rArr; CRC32
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIdRead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>SBoard_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, speak.o(i.SBoard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SBoard_Init &rArr; Set_Volume &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Volume
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Charge
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IOCON_PinMuxSet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIROutput
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>Set_Charge</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, speak.o(i.Set_Charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Charge &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rcv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBoard_Init
</UL>

<P><STRONG><a name="[aa]"></a>Set_Volume</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, speak.o(i.Set_Volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Volume &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rcv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBoard_Init
</UL>

<P><STRONG><a name="[ac]"></a>Sine_Close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, speak.o(i.Sine_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Sine_Close &rArr; CANSend_AMBESetSine &rArr; can_send &rArr; CAN_init &rArr; baudrateCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend_AMBESetSine
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mute_ON
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>Sine_Open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, speak.o(i.Sine_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Sine_Open &rArr; CANSend_AMBESetSine &rArr; can_send &rArr; CAN_init &rArr; baudrateCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend_AMBESetSine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mute_OFF
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_ON
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetSine
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, main.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mute_ON
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_OFF
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chip_11xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemCoreClockUpdate &rArr; Chip_Clock_GetSystemClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_GetSystemClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sysinit.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; Board_SystemInit &rArr; SystemSetupClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>TIM16B0_INT_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, t16b0.o(i.TIM16B0_INT_init))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 716 bytes, Stack size 8 bytes, t16b0.o(i.TIMER16_0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER16_0_IRQHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>UIdRead</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bspiapdriver.o(i.UIdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIdRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUID
</UL>

<P><STRONG><a name="[b3]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c_11xx.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_0_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[7c]"></a>baudrateCalculate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can.o(i.baudrateCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = baudrateCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init
</UL>

<P><STRONG><a name="[b5]"></a>can_data_send</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, can.o(i.can_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = can_data_send &rArr; can_send &rArr; CAN_init &rArr; baudrateCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>can_rcv</STRONG> (Thumb, 802 bytes, Stack size 56 bytes, can.o(i.can_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = can_rcv &rArr; Set_Volume &rArr; Chip_GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Volume
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Charge
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWEROFF_State_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWEROFF_State_Close
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JDQ_State_Close
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_rx
</UL>

<P><STRONG><a name="[79]"></a>can_send</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, can.o(i.can_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = can_send &rArr; CAN_init &rArr; baudrateCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend_AMBESetSine
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>delay_24c16</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at24c16.o(i.delay_24c16))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_WriteOneByte
</UL>

<P><STRONG><a name="[4e]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[23]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fputc &rArr; Board_UARTPutChar &rArr; Chip_UART_SendBlocking &rArr; Chip_UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>i2c_app_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at24c16.o(i.i2c_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_app_init &rArr; Chip_I2C_SetClockRate &rArr; Chip_Clock_GetMainClockRate &rArr; Chip_Clock_GetWDTOSCRate
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_SetClockRate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_I2C_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMasterSetarp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_PinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[38]"></a>main</STRONG> (Thumb, 3980 bytes, Stack size 88 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = main &rArr; ReadUID &rArr; CRC32
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_send
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16B0_INT_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Open
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine_Close
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBoard_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUID
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWEROFF_State_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWEROFF_State_Close
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mute_ON
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mute_OFF
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_ON
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_OFF
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JDQ_State_Open
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JDQ_State_Close
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Key2
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Key1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D18V_State
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_WriteOneByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_ReadOneByte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C16_Check
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEWrData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetSine
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetGain
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBERdData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEGetRdStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GPIO_GetPinState
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b7]"></a>startMasterSetarp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at24c16.o(i.startMasterSetarp))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_app_init
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[ef]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bc]"></a>Chip_GPIO_GetPinState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.Chip_GPIO_GetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[5a]"></a>Chip_GPIO_GetPinState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ambe.o(i.Chip_GPIO_GetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParalleGet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEGetWrStatus
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEGetRdStatus
</UL>

<P><STRONG><a name="[a1]"></a>Chip_GPIO_SetPinDIRInput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ambe.o(i.Chip_GPIO_SetPinDIRInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParalleGet
</UL>

<P><STRONG><a name="[a2]"></a>Chip_GPIO_SetPinDIROutput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ambe.o(i.Chip_GPIO_SetPinDIROutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParallelSet
</UL>

<P><STRONG><a name="[61]"></a>Chip_GPIO_SetPinState</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ambe.o(i.Chip_GPIO_SetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParallelSet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEWrData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetSine
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBESetGain
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBEReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMBERdData
</UL>

<P><STRONG><a name="[a3]"></a>Chip_IOCON_PinMuxSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ambe.o(i.Chip_IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinInit
</UL>

<P><STRONG><a name="[90]"></a>Chip_GPIO_GetPinState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, speak.o(i.Chip_GPIO_GetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Key2
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Key1
</UL>

<P><STRONG><a name="[a9]"></a>Chip_GPIO_SetPinDIRInput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, speak.o(i.Chip_GPIO_SetPinDIRInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBoard_Init
</UL>

<P><STRONG><a name="[a8]"></a>Chip_GPIO_SetPinDIROutput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, speak.o(i.Chip_GPIO_SetPinDIROutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBoard_Init
</UL>

<P><STRONG><a name="[9b]"></a>Chip_GPIO_SetPinState</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, speak.o(i.Chip_GPIO_SetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Volume
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Charge
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mute_ON
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mute_OFF
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_ON
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_OFF
</UL>

<P><STRONG><a name="[a7]"></a>Chip_IOCON_PinMuxSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speak.o(i.Chip_IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBoard_Init
</UL>

<P><STRONG><a name="[87]"></a>Chip_GPIO_GetPinState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dataio.o(i.Chip_GPIO_GetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GPIO_GetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D18V_State
</UL>

<P><STRONG><a name="[95]"></a>Chip_GPIO_SetPinDIRInput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, dataio.o(i.Chip_GPIO_SetPinDIRInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinDIRInput
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[93]"></a>Chip_GPIO_SetPinDIROutput</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, dataio.o(i.Chip_GPIO_SetPinDIROutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Chip_GPIO_SetPinDIROutput
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>

<P><STRONG><a name="[99]"></a>Chip_GPIO_SetPinState</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dataio.o(i.Chip_GPIO_SetPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWEROFF_State_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWEROFF_State_Close
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JDQ_State_Open
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JDQ_State_Close
</UL>

<P><STRONG><a name="[97]"></a>Chip_IOCON_PinMuxSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at24c16.o(i.Chip_IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C_PinMux
</UL>

<P><STRONG><a name="[75]"></a>SystemSetupClocking</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, board_sysinit.o(i.SystemSetupClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemSetupClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_PowerDown
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetSystemPLLSource
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_Clock_SetMainClockSource
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SYSCTL_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SystemInit
</UL>

<P><STRONG><a name="[24]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4b]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[42]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[43]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
