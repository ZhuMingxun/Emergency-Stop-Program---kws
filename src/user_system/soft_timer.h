///////////////////////////////////////////////////////////////////////////
/// @file soft_timer.h
/// @brief 软件定时器
/// 
/// 使用软件模拟定时器
/// 
/// @author  
/// @version v1.0
/// @date    
///
/// <b>Copyright
///////////////////////////////////////////////////////////////////////////
#ifndef _SOFT_TIMER_H_
#define _SOFT_TIMER_H_

#ifdef __cplusplus
extern "C" {
#endif


/////////////////////////////////////////////////////
/// 包含头文件
/////////////////////////////////////////////////////
#include "lpc_types.h" 

/////////////////////////////////////////////////////
/// 宏定义
/////////////////////////////////////////////////////
/// 用户可配置
#define SOFT_TIMER_NUM     10      /// 软件定时器数量，最多32个(cortex m3 int是32位)

/// 系统使用，用户不可更改
#define TIMER_HANDLE_MODE_INT        1      /// 软件定时器处理模式:直接在中断中处理
#define TIMER_HANDLE_MODE_MSG        0      /// 软件定时器处理模式:发送消息，在主循环中处理

/////////////////////////////////////////////////////
/// 结构定义
/////////////////////////////////////////////////////
/// 软件定时器结构
typedef struct _SOFT_TIMER
{ 
	PFV	callBackFunc;             ///< 回调函数
	uint16_t  delay;					  ///< 延时时间
    uint8_t   handleMode;               ///< 处理模式
} SOFT_TIM_TypeDef, *P_SOFT_TIM_TypeDef;

/////////////////////////////////////////////////////
/// 接口声明
/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
/// @brief 	初始化软件定时器
///
/// @param[in]  无
/// @reture     无

//////////////////////////////////////////////////////////////////////////////////
extern void InitSoftTimers (void);

//////////////////////////////////////////////////////////////////////////////////
/// @brief 	注册启动一个新的软件定时器
///
/// @param[in]  mode   延时时间到时的处理模式:在中断处理or发送消息到主循环处理?
/// @param[in]  delay  延时时间
/// @param[in]  callBackFunc   回调函数
/// @reture     软件定时器ID,-1表示注册失败，软件定时器数组已满
///
//////////////////////////////////////////////////////////////////////////////////
extern int8_t StartSoftTimer(uint8_t mode, uint16_t delay, PFV callBackFunc);

//////////////////////////////////////////////////////////////////////////////////
/// @brief 	停止一个软件定时器
///
/// @param[in]  timerID   软件定时器ID
/// @reture     成功返回TRUE,失败返回FALSE
///
//////////////////////////////////////////////////////////////////////////////////
extern uint8_t StopSoftTimer(uint8_t timerID);

//////////////////////////////////////////////////////////////////////////////////
/// @brief 软件定时器服务，在系统时钟中断服务中调用
///
/// @param[in]  无
/// @reture     无
///
//////////////////////////////////////////////////////////////////////////////////
extern void SoftTimerService(void);

#ifdef __cplusplus
}
#endif

#endif /* _SOFT_TIMER_H_ */
